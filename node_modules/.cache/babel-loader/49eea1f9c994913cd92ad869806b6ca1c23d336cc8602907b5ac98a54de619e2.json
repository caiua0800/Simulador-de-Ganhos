{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Caiu\\xE3\\\\Desktop\\\\DEV - PATH\\\\TRABALHO\\\\cadastro-produtos-react\\\\src\\\\Simulacao.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { getFirestore, collection, getDocs } from 'firebase/firestore';\nimport { initializeApp } from 'firebase/app';\nimport firebaseConfig from './Components/firebaseConfig';\nimport RespostaSimulacao from './Components/RespostaSimulacao';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Simulacao() {\n  _s();\n  const [produtos, setProdutos] = useState([]);\n  const [combinações, setCombinações] = useState([]);\n  const [lucroDesejado, setLucroDesejado] = useState(null);\n  const [pesoMaximo, setPesoMaximo] = useState(null);\n  const [capacidadeCaminhao, setCapacidadeCaminhao] = useState(null);\n  useEffect(() => {\n    const fetchProdutos = async () => {\n      try {\n        const app = initializeApp(firebaseConfig);\n        const db = getFirestore(app);\n        const produtosRef = collection(db, 'produtos');\n        const produtosSnapshot = await getDocs(produtosRef);\n        const produtosData = produtosSnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n        setProdutos(produtosData);\n      } catch (error) {\n        console.error('Erro ao buscar os produtos:', error);\n      }\n    };\n    fetchProdutos();\n  }, []);\n  const gerarPossibilidades = () => {\n    console.log(\"Gerando possibilidades...\");\n    const combinaçõesPossíveis = [];\n\n    // Função auxiliar para gerar combinações recursivamente\n    const gerarCombinações = (índice, combinaçãoAtual, pesoAtual, volumeAtual) => {\n      console.log(\"Gerando combinações...\");\n      // Verifica se atingiu o peso máximo ou a capacidade do caminhão\n      if (pesoAtual > pesoMaximo || volumeAtual > capacidadeCaminhao) {\n        console.log(\"Peso ou volume máximo atingido. Parando...\");\n        return;\n      }\n\n      // Verifica se a combinação atual atende ao lucro desejado\n      const lucroAtual = calcularLucro(combinaçãoAtual);\n      console.log(\"Lucro atual:\", lucroAtual);\n      console.log(\"Lucro desejado:\", lucroDesejado);\n      if (lucroAtual >= lucroDesejado) {\n        console.log(\"Lucro desejado alcançado. Adicionando combinação...\");\n        combinaçõesPossíveis.push(combinaçãoAtual);\n      }\n\n      // Gera novas combinações incluindo o produto atual e chama recursivamente para os próximos produtos\n      for (let i = índice; i < produtos.length; i++) {\n        const produto = produtos[i];\n        const novoPeso = pesoAtual + produto.Peso * produto.quantidade;\n        const novoVolume = volumeAtual + produto.m3 * produto.quantidade;\n        if (produto.quantidade > 0 && novoPeso <= pesoMaximo && novoVolume <= capacidadeCaminhao) {\n          gerarCombinações(i + 1, combinaçãoAtual.concat(produto), novoPeso, novoVolume);\n        }\n      }\n    };\n\n    // Inicia a geração de combinações\n    gerarCombinações(0, [], 0, 0);\n    console.log(\"Combinações possíveis:\", combinaçõesPossíveis);\n    setCombinações(combinaçõesPossíveis);\n  };\n  const calcularLucro = combinação => {\n    return combinação.reduce((total, produto) => {\n      // Calcula o lucro para o produto considerando o preço final e a quantidade\n      return total + (produto.PRECO_FINAL * produto.quantidade - produto.Peso * produto.quantidade);\n    }, 0);\n  };\n  const handleLucroDesejadoChange = e => {\n    const valor = parseFloat(e.target.value);\n    if (!isNaN(valor)) {\n      setLucroDesejado(valor);\n    } else {\n      setLucroDesejado(null);\n    }\n  };\n  const handlePesoMaximoChange = e => {\n    const valor = parseFloat(e.target.value);\n    if (!isNaN(valor)) {\n      setPesoMaximo(valor);\n    } else {\n      setPesoMaximo(null);\n    }\n  };\n  const handleCapacidadeCaminhaoChange = e => {\n    const valor = parseFloat(e.target.value);\n    if (!isNaN(valor)) {\n      setCapacidadeCaminhao(valor);\n    } else {\n      setCapacidadeCaminhao(null);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Simulacao\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"custom-cursor Simulacao-title\",\n      children: \"Simula\\xE7\\xE3o De Lucro\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"PriceWannaWin\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Quanto de lucro deseja ganhar?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Informe o lucro desejado\",\n        value: lucroDesejado,\n        onChange: handleLucroDesejadoChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Peso m\\xE1ximo caminh\\xE3o\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Informe o peso m\\xE1ximo\",\n        value: pesoMaximo,\n        onChange: handlePesoMaximoChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Capacidade\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Informe a capacidade do caminh\\xE3o\",\n        value: capacidadeCaminhao,\n        onChange: handleCapacidadeCaminhaoChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: gerarPossibilidades,\n        children: \"Gerar Possibilidades\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(RespostaSimulacao, {\n      combinações: combinações\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 9\n  }, this);\n}\n_s(Simulacao, \"sCpj7kkyPdJTQmMGO30JxDKnd1M=\");\n_c = Simulacao;\nexport default Simulacao;\nvar _c;\n$RefreshReg$(_c, \"Simulacao\");","map":{"version":3,"names":["React","useEffect","useState","getFirestore","collection","getDocs","initializeApp","firebaseConfig","RespostaSimulacao","jsxDEV","_jsxDEV","Simulacao","_s","produtos","setProdutos","combinações","setCombinações","lucroDesejado","setLucroDesejado","pesoMaximo","setPesoMaximo","capacidadeCaminhao","setCapacidadeCaminhao","fetchProdutos","app","db","produtosRef","produtosSnapshot","produtosData","docs","map","doc","id","data","error","console","gerarPossibilidades","log","combinaçõesPossíveis","gerarCombinações","índice","combinaçãoAtual","pesoAtual","volumeAtual","lucroAtual","calcularLucro","push","i","length","produto","novoPeso","Peso","quantidade","novoVolume","m3","concat","combinação","reduce","total","PRECO_FINAL","handleLucroDesejadoChange","e","valor","parseFloat","target","value","isNaN","handlePesoMaximoChange","handleCapacidadeCaminhaoChange","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Caiuã/Desktop/DEV - PATH/TRABALHO/cadastro-produtos-react/src/Simulacao.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { getFirestore, collection, getDocs } from 'firebase/firestore';\r\nimport { initializeApp } from 'firebase/app'; \r\nimport firebaseConfig from './Components/firebaseConfig'; \r\nimport RespostaSimulacao from './Components/RespostaSimulacao';\r\n\r\nfunction Simulacao() {\r\n    const [produtos, setProdutos] = useState([]);\r\n    const [combinações, setCombinações] = useState([]);\r\n    const [lucroDesejado, setLucroDesejado] = useState(null);\r\n    const [pesoMaximo, setPesoMaximo] = useState(null);\r\n    const [capacidadeCaminhao, setCapacidadeCaminhao] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const fetchProdutos = async () => {\r\n            try {\r\n                const app = initializeApp(firebaseConfig);\r\n                const db = getFirestore(app);\r\n                const produtosRef = collection(db, 'produtos');\r\n                const produtosSnapshot = await getDocs(produtosRef);\r\n                const produtosData = produtosSnapshot.docs.map(doc => ({\r\n                    id: doc.id,\r\n                    ...doc.data()\r\n                }));\r\n                setProdutos(produtosData);\r\n            } catch (error) {\r\n                console.error('Erro ao buscar os produtos:', error);\r\n            }\r\n        };\r\n        fetchProdutos();\r\n    }, []); \r\n\r\n    const gerarPossibilidades = () => {\r\n        console.log(\"Gerando possibilidades...\");\r\n        const combinaçõesPossíveis = [];\r\n    \r\n        // Função auxiliar para gerar combinações recursivamente\r\n        const gerarCombinações = (índice, combinaçãoAtual, pesoAtual, volumeAtual) => {\r\n            console.log(\"Gerando combinações...\");\r\n            // Verifica se atingiu o peso máximo ou a capacidade do caminhão\r\n            if (pesoAtual > pesoMaximo || volumeAtual > capacidadeCaminhao) {\r\n                console.log(\"Peso ou volume máximo atingido. Parando...\");\r\n                return;\r\n            }\r\n    \r\n            // Verifica se a combinação atual atende ao lucro desejado\r\n            const lucroAtual = calcularLucro(combinaçãoAtual);\r\n            console.log(\"Lucro atual:\", lucroAtual);\r\n            console.log(\"Lucro desejado:\", lucroDesejado);\r\n            if (lucroAtual >= lucroDesejado) {\r\n                console.log(\"Lucro desejado alcançado. Adicionando combinação...\");\r\n                combinaçõesPossíveis.push(combinaçãoAtual);\r\n            }\r\n    \r\n            // Gera novas combinações incluindo o produto atual e chama recursivamente para os próximos produtos\r\n            for (let i = índice; i < produtos.length; i++) {\r\n                const produto = produtos[i];\r\n                const novoPeso = pesoAtual + produto.Peso * produto.quantidade;\r\n                const novoVolume = volumeAtual + produto.m3 * produto.quantidade;\r\n                \r\n                if (produto.quantidade > 0 && novoPeso <= pesoMaximo && novoVolume <= capacidadeCaminhao) {\r\n                    gerarCombinações(i + 1, combinaçãoAtual.concat(produto), novoPeso, novoVolume);\r\n                }\r\n            }\r\n        };\r\n    \r\n        // Inicia a geração de combinações\r\n        gerarCombinações(0, [], 0, 0);\r\n    \r\n        console.log(\"Combinações possíveis:\", combinaçõesPossíveis);\r\n        setCombinações(combinaçõesPossíveis);\r\n    };\r\n    \r\n\r\n    const calcularLucro = (combinação) => {\r\n        return combinação.reduce((total, produto) => {\r\n            // Calcula o lucro para o produto considerando o preço final e a quantidade\r\n            return total + (produto.PRECO_FINAL * produto.quantidade - produto.Peso * produto.quantidade);\r\n        }, 0);\r\n    };\r\n\r\n \r\n\r\n    const handleLucroDesejadoChange = (e) => {\r\n        const valor = parseFloat(e.target.value);\r\n        if (!isNaN(valor)) {\r\n            setLucroDesejado(valor);\r\n        } else {\r\n            setLucroDesejado(null);\r\n        }\r\n    };\r\n    \r\n    const handlePesoMaximoChange = (e) => {\r\n        const valor = parseFloat(e.target.value);\r\n        if (!isNaN(valor)) {\r\n            setPesoMaximo(valor);\r\n        } else {\r\n            setPesoMaximo(null);\r\n        }\r\n    };\r\n    \r\n    const handleCapacidadeCaminhaoChange = (e) => {\r\n        const valor = parseFloat(e.target.value);\r\n        if (!isNaN(valor)) {\r\n            setCapacidadeCaminhao(valor);\r\n        } else {\r\n            setCapacidadeCaminhao(null);\r\n        }\r\n    };\r\n    \r\n    return (\r\n        <div className='Simulacao'>\r\n            <h1 className='custom-cursor Simulacao-title'>Simulação De Lucro</h1>\r\n            <div className='PriceWannaWin'>\r\n                <h2>Quanto de lucro deseja ganhar?</h2>\r\n                <input \r\n                    type='number' \r\n                    placeholder='Informe o lucro desejado'\r\n                    value={lucroDesejado} \r\n                    onChange={handleLucroDesejadoChange} \r\n                />\r\n                <h3>Peso máximo caminhão</h3>\r\n                <input \r\n                    type='number' \r\n                    placeholder='Informe o peso máximo'\r\n                    value={pesoMaximo} \r\n                    onChange={handlePesoMaximoChange} \r\n                />\r\n                <h3>Capacidade</h3>\r\n                <input \r\n                    type='number' \r\n                    placeholder='Informe a capacidade do caminhão'\r\n                    value={capacidadeCaminhao} \r\n                    onChange={handleCapacidadeCaminhaoChange} \r\n                />\r\n                <button onClick={gerarPossibilidades}>Gerar Possibilidades</button>\r\n            </div>\r\n            <RespostaSimulacao combinações={combinações} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Simulacao;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}