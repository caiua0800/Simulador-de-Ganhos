{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Caiu\\xE3\\\\Desktop\\\\DEV - PATH\\\\TRABALHO\\\\cadastro-produtos-react\\\\src\\\\Simulacao.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { getFirestore, collection, getDocs } from 'firebase/firestore';\nimport { initializeApp } from 'firebase/app';\nimport firebaseConfig from './Components/firebaseConfig';\nimport RespostaSimulacao from './Components/RespostaSimulacao';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Simulacao() {\n  _s();\n  const [produtos, setProdutos] = useState([]);\n  const [lucroDesejado, setLucroDesejado] = useState('');\n  const [capacidade, setCapacidade] = useState('');\n  const [VolumeCaminhao, setVolumeCaminhao] = useState('');\n  const [maximoLucroUni, setMaximoLucroUni] = useState('');\n  const [combinations, setCombinations] = useState([]);\n  useEffect(() => {\n    const fetchProdutos = async () => {\n      try {\n        const app = initializeApp(firebaseConfig);\n        const db = getFirestore(app);\n        const produtosRef = collection(db, 'produtos');\n        const produtosSnapshot = await getDocs(produtosRef);\n        const produtosData = produtosSnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n        setProdutos(produtosData);\n      } catch (error) {\n        console.error('Erro ao buscar os produtos:', error);\n      }\n    };\n    fetchProdutos();\n  }, []);\n  const handleGerarPossibilidades = () => {\n    const info_products = produtos.map(p => ({\n      custo: parseFloat(p.PRECO_FINAL),\n      nome: p.Nome,\n      peso: parseFloat(p.Peso),\n      volume: parseFloat(p.m3)\n    }));\n    encherCaminhao(info_products);\n  };\n  function encherCaminhao(objects) {\n    let random_nums = [];\n    for (let i = 0; i < 5; i++) {\n      random_nums[i] = Math.floor(Math.random() * objects.length);\n    }\n    let aparicoes = contarPorcentagens(random_nums, objects.length);\n    let chaves = Object.keys(aparicoes);\n    let combinacao = [];\n    for (let chave of chaves) {\n      let percentual = aparicoes[chave];\n      let produto = objects[chave];\n      let qtde = parseInt(VolumeCaminhao / produto.volume * percentual);\n      let comb = {\n        nome: produto.nome,\n        aparicao: percentual,\n        qtde: qtde,\n        peso: qtde * produto.peso,\n        peso_unitario: produto.peso,\n        volume_unitario: produto.volume,\n        volume: produto.volume * qtde,\n        custoUnitario: produto.custo,\n        vendaUnitario: (qtde * produto.custo / (lucroDesejado * percentual) * produto.custo + produto.custo).toFixed(2),\n        lucroUnitario: (qtde * produto.custo / (lucroDesejado * percentual) * produto.custo).toFixed(2)\n      };\n      if (parseFloat(comb.lucroUnitario) <= parseFloat(maximoLucroUni)) combinacao.push(comb);else if (combinacao.length > 0) {\n        let random_num = Math.floor(Math.random() * combinacao.length);\n        let sorteada = combinacao[random_num];\n        sorteada.aparicao += comb.aparicao;\n        let qtde_a_mais = parseInt(VolumeCaminhao / sorteada.volume_unitario * sorteada.aparicao);\n        sorteada.qtde = qtde_a_mais;\n        sorteada.vendaUnitario = (qtde_a_mais * sorteada.custo / (lucroDesejado * sorteada.aparicao) * sorteada.custo + sorteada.custo).toFixed(2);\n        sorteada.lucroUnitario = (qtde_a_mais * sorteada.custo / (lucroDesejado * sorteada.aparicao) * sorteada.custo).toFixed(2);\n        sorteada.peso = qtde_a_mais * sorteada.peso_unitario;\n        sorteada.volume = qtde_a_mais * sorteada.volume_unitario;\n      }\n    }\n    let somaPesos = 0;\n    combinacao.forEach(comb => {\n      somaPesos += parseFloat(comb.peso);\n    });\n    let somaVolume = 0;\n    combinacao.forEach(comb => {\n      somaVolume += parseFloat(comb.vol);\n    });\n    let pesoMax = parseFloat(VolumeCaminhao) * parseFloat(capacidade);\n    if (somaPesos < pesoMax - pesoMax * 0.05) {\n      let quantoFalta = pesoMax / somaPesos;\n      console.log(`${somaPesos} de ${pesoMax}, falta ${quantoFalta}\\n\n            `);\n    } else {\n      console.log('Peso alcansado');\n    }\n  }\n  function contarPorcentagens(vetor, tamanhoTotal) {\n    var contagem = {};\n    for (var i = 0; i < vetor.length; i++) {\n      var numero = vetor[i];\n\n      // Se o número já estiver na contagem, aumenta sua contagem em 1\n      if (contagem[numero]) {\n        contagem[numero]++;\n      }\n      // Se o número ainda não estiver na contagem, inicializa sua contagem em 1\n      else {\n        contagem[numero] = 1;\n      }\n    }\n\n    // Calcular a porcentagem de cada número em relação ao tamanho total do vetor\n    for (var numero in contagem) {\n      contagem[numero] = contagem[numero] / tamanhoTotal;\n    }\n    return contagem;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Simulacao\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"custom-cursor Simulacao-title\",\n      children: \"Simula\\xE7\\xE3o De Lucro\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"PriceWannaWin\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Quanto de lucro deseja ganhar?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Informe o lucro desejado\",\n        value: lucroDesejado,\n        onChange: e => setLucroDesejado(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Capacidade de peso por metros cubicos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Informe o peso m\\xE1ximo\",\n        value: capacidade,\n        onChange: e => setCapacidade(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Capacidade em metros cubicos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Informe a capacidade do caminh\\xE3o\",\n        value: VolumeCaminhao,\n        onChange: e => setVolumeCaminhao(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"M\\xE1ximo de lucro sobre produto\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Informe a capacidade do caminh\\xE3o\",\n        value: maximoLucroUni,\n        onChange: e => setMaximoLucroUni(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleGerarPossibilidades,\n        children: \"Gerar Possibilidades\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(RespostaSimulacao, {\n      combinations: combinations\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 9\n  }, this);\n}\n_s(Simulacao, \"XRB92dRna/tGcL1YRVoLs/wrP1g=\");\n_c = Simulacao;\nexport default Simulacao;\nvar _c;\n$RefreshReg$(_c, \"Simulacao\");","map":{"version":3,"names":["React","useEffect","useState","getFirestore","collection","getDocs","initializeApp","firebaseConfig","RespostaSimulacao","jsxDEV","_jsxDEV","Simulacao","_s","produtos","setProdutos","lucroDesejado","setLucroDesejado","capacidade","setCapacidade","VolumeCaminhao","setVolumeCaminhao","maximoLucroUni","setMaximoLucroUni","combinations","setCombinations","fetchProdutos","app","db","produtosRef","produtosSnapshot","produtosData","docs","map","doc","id","data","error","console","handleGerarPossibilidades","info_products","p","custo","parseFloat","PRECO_FINAL","nome","Nome","peso","Peso","volume","m3","encherCaminhao","objects","random_nums","i","Math","floor","random","length","aparicoes","contarPorcentagens","chaves","Object","keys","combinacao","chave","percentual","produto","qtde","parseInt","comb","aparicao","peso_unitario","volume_unitario","custoUnitario","vendaUnitario","toFixed","lucroUnitario","push","random_num","sorteada","qtde_a_mais","somaPesos","forEach","somaVolume","vol","pesoMax","quantoFalta","log","vetor","tamanhoTotal","contagem","numero","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Caiuã/Desktop/DEV - PATH/TRABALHO/cadastro-produtos-react/src/Simulacao.js"],"sourcesContent":["\r\nimport React, { useEffect, useState } from 'react';\r\nimport { getFirestore, collection, getDocs } from 'firebase/firestore';\r\nimport { initializeApp } from 'firebase/app'; \r\nimport firebaseConfig from './Components/firebaseConfig'; \r\nimport RespostaSimulacao from './Components/RespostaSimulacao';\r\n\r\nfunction Simulacao() {\r\n    const [produtos, setProdutos] = useState([]);\r\n    const [lucroDesejado, setLucroDesejado] = useState('');\r\n    const [capacidade, setCapacidade] = useState('');\r\n    const [VolumeCaminhao, setVolumeCaminhao] = useState('');\r\n    const [maximoLucroUni, setMaximoLucroUni] = useState('');\r\n    const [combinations, setCombinations] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchProdutos = async () => {\r\n            try {\r\n                const app = initializeApp(firebaseConfig);\r\n                const db = getFirestore(app);\r\n                const produtosRef = collection(db, 'produtos');\r\n                const produtosSnapshot = await getDocs(produtosRef);\r\n                const produtosData = produtosSnapshot.docs.map(doc => ({\r\n                    id: doc.id,\r\n                    ...doc.data()\r\n                }));\r\n                setProdutos(produtosData);\r\n            } catch (error) {\r\n                console.error('Erro ao buscar os produtos:', error);\r\n            }\r\n        };\r\n        fetchProdutos();\r\n    }, []); \r\n\r\n    const handleGerarPossibilidades = () => {\r\n        const info_products = produtos.map(p => ({\r\n            custo: parseFloat(p.PRECO_FINAL),\r\n            nome: p.Nome,\r\n            peso: parseFloat(p.Peso),\r\n            volume: parseFloat(p.m3)\r\n        }));\r\n\r\n        encherCaminhao(info_products);\r\n    };\r\n\r\n    function encherCaminhao(objects){\r\n\r\n        let random_nums = []\r\n    \r\n        for(let i = 0; i < 5; i++){\r\n            random_nums[i] = Math.floor(Math.random() * objects.length);\r\n        }\r\n    \r\n        let aparicoes = contarPorcentagens(random_nums, objects.length);\r\n\r\n        let chaves = Object.keys(aparicoes);\r\n\r\n        let combinacao = []\r\n    \r\n        for(let chave of chaves){\r\n            let percentual = aparicoes[chave];\r\n            let produto = objects[chave];\r\n            let qtde = parseInt((VolumeCaminhao/produto.volume) * percentual);\r\n\r\n            let comb = {\r\n                nome: produto.nome,\r\n                aparicao: percentual,\r\n                qtde: qtde,\r\n                peso: qtde * produto.peso,\r\n                peso_unitario: produto.peso,\r\n                volume_unitario: produto.volume,\r\n                volume: produto.volume * qtde,\r\n                custoUnitario: produto.custo,\r\n                vendaUnitario: ((((qtde*produto.custo) / (lucroDesejado * percentual))* produto.custo) + produto.custo).toFixed(2),\r\n                lucroUnitario: ((((qtde*produto.custo) / (lucroDesejado * percentual))* produto.custo)).toFixed(2)\r\n            }\r\n\r\n            if(parseFloat(comb.lucroUnitario) <= parseFloat(maximoLucroUni))\r\n                combinacao.push(comb)\r\n            else if(combinacao.length > 0){\r\n                let random_num = Math.floor(Math.random() * combinacao.length);\r\n\r\n                let sorteada = combinacao[random_num];\r\n                sorteada.aparicao += comb.aparicao;\r\n                let qtde_a_mais = parseInt((VolumeCaminhao/sorteada.volume_unitario) * sorteada.aparicao);\r\n                sorteada.qtde = qtde_a_mais;\r\n                sorteada.vendaUnitario = ((((qtde_a_mais*sorteada.custo) / (lucroDesejado * sorteada.aparicao))* sorteada.custo) + sorteada.custo).toFixed(2);\r\n                sorteada.lucroUnitario = ((((qtde_a_mais*sorteada.custo) / (lucroDesejado * sorteada.aparicao))* sorteada.custo)).toFixed(2);\r\n                sorteada.peso = qtde_a_mais * sorteada.peso_unitario;\r\n                sorteada.volume = qtde_a_mais * sorteada.volume_unitario;\r\n            }\r\n        }\r\n\r\n        let somaPesos = 0;\r\n        combinacao.forEach(comb => {\r\n            somaPesos += parseFloat(comb.peso)\r\n        })\r\n\r\n        let somaVolume = 0;\r\n        combinacao.forEach(comb => {\r\n            somaVolume += parseFloat(comb.vol)\r\n        })\r\n\r\n        let pesoMax = parseFloat(VolumeCaminhao)*parseFloat(capacidade)\r\n\r\n\r\n        if(somaPesos < (pesoMax - (pesoMax * 0.05))){\r\n\r\n            let quantoFalta = (pesoMax/somaPesos);\r\n\r\n            console.log(`${somaPesos} de ${pesoMax}, falta ${quantoFalta}\\n\r\n            `);\r\n        }else{\r\n            console.log('Peso alcansado');\r\n        }\r\n    }\r\n    \r\n    function contarPorcentagens(vetor, tamanhoTotal) {\r\n        var contagem = {};\r\n        for (var i = 0; i < vetor.length; i++) {\r\n            var numero = vetor[i];\r\n            \r\n            // Se o número já estiver na contagem, aumenta sua contagem em 1\r\n            if (contagem[numero]) {\r\n                contagem[numero]++;\r\n            } \r\n            // Se o número ainda não estiver na contagem, inicializa sua contagem em 1\r\n            else {\r\n                contagem[numero] = 1;\r\n            }\r\n        }\r\n    \r\n        // Calcular a porcentagem de cada número em relação ao tamanho total do vetor\r\n        for (var numero in contagem) {\r\n            contagem[numero] = (contagem[numero] / tamanhoTotal);\r\n        }\r\n        \r\n        return contagem;\r\n    }\r\n    \r\n    return (\r\n        <div className='Simulacao'>\r\n            <h1 className='custom-cursor Simulacao-title'>Simulação De Lucro</h1>\r\n            <div className='PriceWannaWin'>\r\n                <h2>Quanto de lucro deseja ganhar?</h2>\r\n                <input \r\n                    type='number' \r\n                    placeholder='Informe o lucro desejado' \r\n                    value={lucroDesejado}\r\n                    onChange={(e) => setLucroDesejado(e.target.value)}\r\n                />\r\n                <h3>Capacidade de peso por metros cubicos</h3>\r\n                <input \r\n                    type='number' \r\n                    placeholder='Informe o peso máximo'\r\n                    value={capacidade}\r\n                    onChange={(e) => setCapacidade(e.target.value)} \r\n                />\r\n                <h3>Capacidade em metros cubicos</h3>\r\n                <input \r\n                    type='number' \r\n                    placeholder='Informe a capacidade do caminhão'\r\n                    value={VolumeCaminhao}\r\n                    onChange={(e) => setVolumeCaminhao(e.target.value)} \r\n                />\r\n                <h3>Máximo de lucro sobre produto</h3>\r\n                <input \r\n                    type='number' \r\n                    placeholder='Informe a capacidade do caminhão'\r\n                    value={maximoLucroUni}\r\n                    onChange={(e) => setMaximoLucroUni(e.target.value)} \r\n                />\r\n                <button onClick={handleGerarPossibilidades}>Gerar Possibilidades</button>\r\n            </div>\r\n            <RespostaSimulacao combinations={combinations} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Simulacao;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}