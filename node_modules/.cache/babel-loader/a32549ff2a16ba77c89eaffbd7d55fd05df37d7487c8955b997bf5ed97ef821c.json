{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Caiu\\xE3\\\\Desktop\\\\DEV - PATH\\\\TRABALHO\\\\cadastro-produtos-react\\\\src\\\\Simulacao.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { getFirestore, collection, getDocs } from 'firebase/firestore';\nimport { initializeApp } from 'firebase/app';\nimport firebaseConfig from './Components/firebaseConfig';\nimport RespostaSimulacao from './Components/RespostaSimulacao';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Simulacao() {\n  _s();\n  const [produtos, setProdutos] = useState([]);\n  const [lucroDesejado, setLucroDesejado] = useState('');\n  const [capacidade, setCapacidade] = useState('');\n  const [VolumeCaminhao, setVolumeCaminhao] = useState('');\n  const [Frete, setFrete] = useState('');\n  const [maximoLucroUni, setMaximoLucroUni] = useState('');\n  const [combinations, setCombinations] = useState([]);\n  const [combinacaoUnica, setcombinacaoUnica] = useState([]);\n  useEffect(() => {\n    const fetchProdutos = async () => {\n      try {\n        const app = initializeApp(firebaseConfig);\n        const db = getFirestore(app);\n        const produtosRef = collection(db, 'produtos');\n        const produtosSnapshot = await getDocs(produtosRef);\n        const produtosData = produtosSnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n        setProdutos(produtosData);\n      } catch (error) {\n        console.error('Erro ao buscar os produtos:', error);\n      }\n    };\n    fetchProdutos();\n  }, []);\n  const handleGerarPossibilidades = () => {\n    const info_products = produtos.map(p => ({\n      custo: parseFloat(p.PRECO_FINAL),\n      nome: p.Nome,\n      peso: parseFloat(p.Peso),\n      volume: parseFloat(p.m3)\n    }));\n    let TODAS_AS_COMBINACOES = new Set();\n    let tentativas = 0;\n    let combsUnicas = [];\n    info_products.forEach(produto => {\n      let qtde = parseInt(parseInt(VolumeCaminhao) / produto.volume);\n      let peso_atual = 0;\n      if (qtde * produto.peso < parseInt(VolumeCaminhao) * parseInt(capacidade)) {\n        let comb = {\n          nome: produto.nome,\n          qtde: qtde,\n          peso: parseInt((qtde * parseFloat(produto.peso)).toFixed(2)),\n          peso_unitario: produto.peso,\n          volume_unitario: parseFloat(produto.volume.toFixed(2)),\n          volume: parseFloat((produto.volume * qtde).toFixed(4)),\n          custoUnitario: produto.custo,\n          vendaUnitario: parseFloat((lucroDesejado / (produto.custo * qtde + parseInt(Frete)) * produto.custo + produto.custo).toFixed(2)),\n          lucroUnitario: parseFloat((lucroDesejado / (produto.custo * qtde + parseInt(Frete)) * produto.custo).toFixed(2)),\n          lucroTotal: parseFloat((lucroDesejado / (produto.custo * qtde + parseInt(Frete)) * produto.custo * qtde).toFixed(2))\n        };\n        let lucroEmCima = comb.vendaUnitario / comb.custoUnitario * 100;\n        if (lucroEmCima < parseInt(maximoLucroUni)) combsUnicas.push(comb);\n      }\n    });\n    setcombinacaoUnica(combsUnicas);\n    while (TODAS_AS_COMBINACOES.size < 100 && tentativas < 2500) {\n      let combinacao2 = encherCaminhao(info_products);\n      if (combinacao2) {\n        TODAS_AS_COMBINACOES.add(JSON.stringify(combinacao2));\n      }\n      tentativas++;\n    }\n    let masterCombinacoes = [];\n    Array.from(TODAS_AS_COMBINACOES).map(comb => {\n      masterCombinacoes.push(JSON.parse(comb));\n    });\n    setCombinations(masterCombinacoes);\n  };\n  function encherCaminhao(objects) {\n    let combinacao = [];\n    // let comb = {\n    //     nome: produto.nome,\n    //     aparicao: percentual,\n    //     qtde: parseInt(qtde),\n    //     peso: parseFloat((qtde * produto.peso).toFixed(2)),\n    //     peso_unitario: produto.peso,\n    //     volume_unitario: parseFloat(produto.volume.toFixed(2)),\n    //     volume: parseFloat((produto.volume * qtde).toFixed(4)),\n    //     custoUnitario: produto.custo,\n    //     vendaUnitario: parseFloat(((((produto.custo) / (lucroDesejado * percentual))* produto.custo) + produto.custo).toFixed(2)),\n    //     lucroUnitario: parseFloat((((produto.custo) / (lucroDesejado * percentual))* produto.custo).toFixed(2)),\n    //     lucroTotal: parseFloat(((((produto.custo) / (lucroDesejado * percentual))* produto.custo) * qtde).toFixed(2)),\n    // }\n\n    let i = 0;\n    while (n != objects.length - 1) {\n      console.log(n);\n      n++;\n    }\n    let somaPesos = 0;\n    combinacao.forEach(comb => {\n      somaPesos += parseFloat(comb.peso);\n    });\n    let somaVolume = 0;\n    combinacao.forEach(comb => {\n      somaVolume += parseFloat(comb.volume);\n    });\n    let somaLucro = 0;\n    combinacao.forEach(comb => {\n      if (!isNaN(comb.lucroUnitario)) {\n        somaLucro += comb.lucroUnitario * comb.qtde;\n      }\n    });\n    let somaCusto = 0;\n    combinacao.forEach(comb => {\n      if (!isNaN(comb.custoUnitario)) {\n        somaCusto += comb.custoUnitario * comb.qtde;\n      }\n    });\n    let pesoMax = parseFloat(VolumeCaminhao) * parseFloat(capacidade);\n    if (somaPesos < pesoMax - pesoMax * 0.05 && somaVolume >= VolumeCaminhao * 0.8 && somaVolume <= VolumeCaminhao) {\n      if (somaLucro > lucroDesejado - lucroDesejado * 0.01 && somaLucro < lucroDesejado + lucroDesejado * 0.05) {\n        combinacao.push({\n          SOMA_LUCRO: somaLucro\n        });\n        combinacao.push({\n          SOMA_CUSTO: somaCusto\n        });\n        combinacao.push({\n          SOMA_VOLUME: somaVolume\n        });\n        combinacao.push({\n          SOMA_PESO: somaPesos\n        });\n        return combinacao;\n      }\n    } else {\n      combinacao.push(somaLucro);\n    }\n  }\n  function contarPorcentagens(vetor, tamanhoTotal) {\n    var contagem = {};\n    for (var i = 0; i < vetor.length; i++) {\n      var numero = vetor[i];\n      if (contagem[numero]) contagem[numero]++;else contagem[numero] = 1;\n    }\n    for (var numero in contagem) contagem[numero] = contagem[numero] / tamanhoTotal;\n    return contagem;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Simulacao\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"custom-cursor Simulacao-title\",\n      children: \"Simula\\xE7\\xE3o De Lucro\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"PriceWannaWin\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Quanto de lucro deseja ganhar?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Informe o lucro desejado\",\n        value: lucroDesejado,\n        onChange: e => setLucroDesejado(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Capacidade de peso por metros cubicos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Informe o peso m\\xE1ximo\",\n        value: capacidade,\n        onChange: e => setCapacidade(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Capacidade em metros cubicos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Informe a capacidade do caminh\\xE3o\",\n        value: VolumeCaminhao,\n        onChange: e => setVolumeCaminhao(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Frete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Informe a capacidade do caminh\\xE3o\",\n        value: Frete,\n        onChange: e => setFrete(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"M\\xE1ximo de lucro sobre produto\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Informe a capacidade do caminh\\xE3o\",\n        value: maximoLucroUni,\n        onChange: e => setMaximoLucroUni(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleGerarPossibilidades,\n        children: \"Gerar Possibilidades\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(RespostaSimulacao, {\n      combinacoesUnitarias: combinacaoUnica,\n      frete: Frete,\n      combinations: combinations\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 178,\n    columnNumber: 9\n  }, this);\n}\n_s(Simulacao, \"qxm7o7rlBFzPj6t60xn14qArUAw=\");\n_c = Simulacao;\nexport default Simulacao;\nvar _c;\n$RefreshReg$(_c, \"Simulacao\");","map":{"version":3,"names":["React","useEffect","useState","getFirestore","collection","getDocs","initializeApp","firebaseConfig","RespostaSimulacao","jsxDEV","_jsxDEV","Simulacao","_s","produtos","setProdutos","lucroDesejado","setLucroDesejado","capacidade","setCapacidade","VolumeCaminhao","setVolumeCaminhao","Frete","setFrete","maximoLucroUni","setMaximoLucroUni","combinations","setCombinations","combinacaoUnica","setcombinacaoUnica","fetchProdutos","app","db","produtosRef","produtosSnapshot","produtosData","docs","map","doc","id","data","error","console","handleGerarPossibilidades","info_products","p","custo","parseFloat","PRECO_FINAL","nome","Nome","peso","Peso","volume","m3","TODAS_AS_COMBINACOES","Set","tentativas","combsUnicas","forEach","produto","qtde","parseInt","peso_atual","comb","toFixed","peso_unitario","volume_unitario","custoUnitario","vendaUnitario","lucroUnitario","lucroTotal","lucroEmCima","push","size","combinacao2","encherCaminhao","add","JSON","stringify","masterCombinacoes","Array","from","parse","objects","combinacao","i","n","length","log","somaPesos","somaVolume","somaLucro","isNaN","somaCusto","pesoMax","SOMA_LUCRO","SOMA_CUSTO","SOMA_VOLUME","SOMA_PESO","contarPorcentagens","vetor","tamanhoTotal","contagem","numero","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","combinacoesUnitarias","frete","_c","$RefreshReg$"],"sources":["C:/Users/Caiuã/Desktop/DEV - PATH/TRABALHO/cadastro-produtos-react/src/Simulacao.js"],"sourcesContent":["\r\nimport React, { useEffect, useState } from 'react';\r\nimport { getFirestore, collection, getDocs } from 'firebase/firestore';\r\nimport { initializeApp } from 'firebase/app'; \r\nimport firebaseConfig from './Components/firebaseConfig'; \r\nimport RespostaSimulacao from './Components/RespostaSimulacao';\r\n\r\nfunction Simulacao() {\r\n    const [produtos, setProdutos] = useState([]);\r\n    const [lucroDesejado, setLucroDesejado] = useState('');\r\n    const [capacidade, setCapacidade] = useState('');\r\n    const [VolumeCaminhao, setVolumeCaminhao] = useState('');\r\n    const [Frete, setFrete] = useState('');\r\n    const [maximoLucroUni, setMaximoLucroUni] = useState('');\r\n    const [combinations, setCombinations] = useState([]);\r\n    const [combinacaoUnica, setcombinacaoUnica] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchProdutos = async () => {\r\n            try {\r\n                const app = initializeApp(firebaseConfig);\r\n                const db = getFirestore(app);\r\n                const produtosRef = collection(db, 'produtos');\r\n                const produtosSnapshot = await getDocs(produtosRef);\r\n                const produtosData = produtosSnapshot.docs.map(doc => ({\r\n                    id: doc.id,\r\n                    ...doc.data()\r\n                }));\r\n                setProdutos(produtosData);\r\n            } catch (error) {\r\n                console.error('Erro ao buscar os produtos:', error);\r\n            }\r\n        };\r\n        fetchProdutos();\r\n    }, []); \r\n\r\n    const handleGerarPossibilidades = () => {\r\n        const info_products = produtos.map(p => ({\r\n            custo: parseFloat(p.PRECO_FINAL),\r\n            nome: p.Nome,\r\n            peso: parseFloat(p.Peso),\r\n            volume: parseFloat(p.m3)\r\n        }));\r\n    \r\n        let TODAS_AS_COMBINACOES = new Set();\r\n        let tentativas = 0;\r\n\r\n        let combsUnicas = []\r\n        info_products.forEach(produto => {\r\n            let qtde = parseInt(parseInt(VolumeCaminhao) / produto.volume);\r\n            let peso_atual = 0;\r\n        \r\n            if ((qtde * produto.peso) < parseInt(VolumeCaminhao) * parseInt(capacidade)) {\r\n                let comb = {\r\n                    nome: produto.nome,\r\n                    qtde: qtde,\r\n                    peso: parseInt((qtde * parseFloat(produto.peso)).toFixed(2)),\r\n                    peso_unitario: produto.peso,\r\n                    volume_unitario: parseFloat(produto.volume.toFixed(2)),\r\n                    volume: parseFloat((produto.volume * qtde).toFixed(4)),\r\n                    custoUnitario: produto.custo,\r\n                    vendaUnitario: parseFloat(((lucroDesejado / ((produto.custo * qtde) + parseInt(Frete)) * produto.custo) + produto.custo).toFixed(2)),\r\n                    lucroUnitario: parseFloat((lucroDesejado / ((produto.custo * qtde) + parseInt(Frete)) * produto.custo).toFixed(2)),\r\n                    lucroTotal: parseFloat(((lucroDesejado / ((produto.custo * qtde) + parseInt(Frete)) * produto.custo) * qtde).toFixed(2)),\r\n                };\r\n\r\n\r\n                let lucroEmCima = (comb.vendaUnitario / comb.custoUnitario)*100\r\n                if(lucroEmCima < parseInt(maximoLucroUni))\r\n                    combsUnicas.push(comb)\r\n            }\r\n        });\r\n\r\n        setcombinacaoUnica(combsUnicas);\r\n        \r\n        while (TODAS_AS_COMBINACOES.size < 100 && tentativas < 2500) {\r\n            let combinacao2 = encherCaminhao(info_products);\r\n            if (combinacao2) {\r\n                TODAS_AS_COMBINACOES.add(JSON.stringify(combinacao2));\r\n            }\r\n            tentativas++;\r\n        }\r\n\r\n        let masterCombinacoes = [];\r\n        Array.from(TODAS_AS_COMBINACOES).map(comb =>{\r\n            masterCombinacoes.push(JSON.parse(comb))\r\n        });\r\n\r\n        setCombinations(masterCombinacoes)\r\n\r\n    };\r\n\r\n    function encherCaminhao(objects){\r\n\r\n        let combinacao = []\r\n        // let comb = {\r\n        //     nome: produto.nome,\r\n        //     aparicao: percentual,\r\n        //     qtde: parseInt(qtde),\r\n        //     peso: parseFloat((qtde * produto.peso).toFixed(2)),\r\n        //     peso_unitario: produto.peso,\r\n        //     volume_unitario: parseFloat(produto.volume.toFixed(2)),\r\n        //     volume: parseFloat((produto.volume * qtde).toFixed(4)),\r\n        //     custoUnitario: produto.custo,\r\n        //     vendaUnitario: parseFloat(((((produto.custo) / (lucroDesejado * percentual))* produto.custo) + produto.custo).toFixed(2)),\r\n        //     lucroUnitario: parseFloat((((produto.custo) / (lucroDesejado * percentual))* produto.custo).toFixed(2)),\r\n        //     lucroTotal: parseFloat(((((produto.custo) / (lucroDesejado * percentual))* produto.custo) * qtde).toFixed(2)),\r\n        // }\r\n\r\n        let i = 0;\r\n\r\n        while(n != objects.length - 1){\r\n            console.log(n)\r\n            n++;\r\n        }\r\n    \r\n        let somaPesos = 0;\r\n        combinacao.forEach(comb => {\r\n            somaPesos += parseFloat(comb.peso)\r\n        })\r\n    \r\n        let somaVolume = 0;\r\n        combinacao.forEach(comb => {\r\n            somaVolume += parseFloat(comb.volume)\r\n        })\r\n    \r\n        let somaLucro = 0;\r\n        combinacao.forEach(comb => {\r\n            if (!isNaN(comb.lucroUnitario)) {\r\n                somaLucro += (comb.lucroUnitario * comb.qtde);\r\n            }\r\n        });\r\n\r\n        let somaCusto = 0;\r\n        combinacao.forEach(comb => {\r\n            if (!isNaN(comb.custoUnitario)) {\r\n                somaCusto += (comb.custoUnitario * comb.qtde);\r\n            }\r\n        });\r\n\r\n    \r\n        \r\n        let pesoMax = parseFloat(VolumeCaminhao)*parseFloat(capacidade)\r\n    \r\n        if(somaPesos < (pesoMax - (pesoMax * 0.05)) && somaVolume >= VolumeCaminhao*0.8 && somaVolume <= VolumeCaminhao){\r\n            if(somaLucro > (lucroDesejado - (lucroDesejado * 0.01)) && somaLucro < (lucroDesejado + (lucroDesejado * 0.05)) ){\r\n                combinacao.push({SOMA_LUCRO:somaLucro})\r\n                combinacao.push({SOMA_CUSTO:somaCusto})\r\n                combinacao.push({SOMA_VOLUME:somaVolume})\r\n                combinacao.push({SOMA_PESO:somaPesos})\r\n                return combinacao;\r\n            }\r\n        }else{\r\n            combinacao.push(somaLucro)\r\n        }\r\n\r\n    }\r\n\r\n\r\n    function contarPorcentagens(vetor, tamanhoTotal) {\r\n        var contagem = {};\r\n\r\n        for (var i = 0; i < vetor.length; i++) {\r\n            var numero = vetor[i];\r\n\r\n            if (contagem[numero]) \r\n                contagem[numero]++;\r\n            else \r\n                contagem[numero] = 1;\r\n        }\r\n    \r\n        for (var numero in contagem) \r\n            contagem[numero] = (contagem[numero] / tamanhoTotal);\r\n        return contagem;\r\n    }\r\n    \r\n    return (\r\n        <div className='Simulacao'>\r\n            <h1 className='custom-cursor Simulacao-title'>Simulação De Lucro</h1>\r\n            <div className='PriceWannaWin'>\r\n                <h2>Quanto de lucro deseja ganhar?</h2>\r\n                <input \r\n                    type='number' \r\n                    placeholder='Informe o lucro desejado' \r\n                    value={lucroDesejado}\r\n                    onChange={(e) => setLucroDesejado(e.target.value)}\r\n                />\r\n                <h3>Capacidade de peso por metros cubicos</h3>\r\n                <input \r\n                    type='number' \r\n                    placeholder='Informe o peso máximo'\r\n                    value={capacidade}\r\n                    onChange={(e) => setCapacidade(e.target.value)} \r\n                />\r\n                <h3>Capacidade em metros cubicos</h3>\r\n                <input \r\n                    type='number' \r\n                    placeholder='Informe a capacidade do caminhão'\r\n                    value={VolumeCaminhao}\r\n                    onChange={(e) => setVolumeCaminhao(e.target.value)} \r\n                />\r\n                <h3>Frete</h3>\r\n                <input \r\n                    type='number' \r\n                    placeholder='Informe a capacidade do caminhão'\r\n                    value={Frete}\r\n                    onChange={(e) => setFrete(e.target.value)} \r\n                />\r\n                <h3>Máximo de lucro sobre produto</h3>\r\n                <input \r\n                    type='number' \r\n                    placeholder='Informe a capacidade do caminhão'\r\n                    value={maximoLucroUni}\r\n                    onChange={(e) => setMaximoLucroUni(e.target.value)} \r\n                />\r\n                <button onClick={handleGerarPossibilidades}>Gerar Possibilidades</button>\r\n            </div>\r\n            <RespostaSimulacao combinacoesUnitarias={combinacaoUnica} frete={Frete} combinations={combinations} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Simulacao;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}