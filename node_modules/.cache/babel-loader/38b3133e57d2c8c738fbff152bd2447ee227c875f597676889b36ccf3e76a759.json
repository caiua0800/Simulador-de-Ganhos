{"ast":null,"code":"// import React, { useEffect, useState } from 'react';\n// import { getFirestore, collection, getDocs } from 'firebase/firestore';\n// import { initializeApp } from 'firebase/app'; \n// import firebaseConfig from './Components/firebaseConfig'; \n// import RespostaSimulacao from './Components/RespostaSimulacao';\n\n// function Simulacao() {\n//     const [produtos, setProdutos] = useState([]);\n//     const [lucroDesejado, setLucroDesejado] = useState('');\n//     const [pesoMaximo, setPesoMaximo] = useState('');\n//     const [capacidadeCaminhao, setCapacidadeCaminhao] = useState('');\n//     const [combinations, setCombinations] = useState([]);\n\n//     useEffect(() => {\n//         const fetchProdutos = async () => {\n//             try {\n//                 const app = initializeApp(firebaseConfig);\n//                 const db = getFirestore(app);\n//                 const produtosRef = collection(db, 'produtos');\n//                 const produtosSnapshot = await getDocs(produtosRef);\n//                 const produtosData = produtosSnapshot.docs.map(doc => ({\n//                     id: doc.id,\n//                     ...doc.data()\n//                 }));\n//                 setProdutos(produtosData);\n//             } catch (error) {\n//                 console.error('Erro ao buscar os produtos:', error);\n//             }\n//         };\n//         fetchProdutos();\n//     }, []); \n\n//     const handleGerarPossibilidades = () => {\n//         const info_products = produtos.map(p => ({\n//             custo: parseFloat(p.PRECO_FINAL),\n//             nome: p.Nome,\n//             peso: parseFloat(p.Peso),\n//             volume: parseFloat(p.m3)\n//         }));\n\n//         encherCaminhaoComUmProduto(info_products);\n//     };\n\n//     function encherCaminhaoComUmProduto(objts){\n//         const newCombinations = [];\n\n//         objts.forEach((obj) => {\n//             let peso_c_atual = 0;\n//             let volume_c_atual = 0;\n//             let qtde_produtos = 0;\n//             let custoTotal = 0;\n\n//             const lucro_desejado = parseFloat(lucroDesejado).toFixed(2);\n//             const MaxPeso = parseFloat(pesoMaximo);\n//             const MaxVol = parseFloat(capacidadeCaminhao);\n\n//             while (peso_c_atual < MaxPeso && volume_c_atual < MaxVol) {\n//                 if ((peso_c_atual + obj.peso) < MaxPeso && (volume_c_atual + obj.volume) < MaxVol) {\n//                     peso_c_atual += obj.peso;\n//                     volume_c_atual += obj.volume;\n//                     qtde_produtos++;\n//                     custoTotal += obj.custo;\n//                 } else {\n//                     const combinacao = {\n//                         nome: obj.nome,\n//                         volume_t: volume_c_atual.toFixed(),\n//                         peso_t: peso_c_atual.toFixed(2),\n//                         custo_uni: (custoTotal / qtde_produtos).toFixed(2),\n//                         venda_uni: ((custoTotal / qtde_produtos) + ((custoTotal / qtde_produtos) * (lucro_desejado / custoTotal))).toFixed(2),\n//                         lucro_uni: (((custoTotal / qtde_produtos) * (lucro_desejado / custoTotal))).toFixed(2),\n//                         lucro_t: (((custoTotal / qtde_produtos) * (lucro_desejado / custoTotal)) * qtde_produtos).toFixed(2),\n//                         qtde: qtde_produtos \n//                     };\n//                     newCombinations.push(combinacao);\n//                     break;\n//                 }\n//             }\n//         });\n//         setCombinations(newCombinations);\n//     }\n\n//     return (\n//         <div className='Simulacao'>\n//             <h1 className='custom-cursor Simulacao-title'>Simulação De Lucro</h1>\n//             <div className='PriceWannaWin'>\n//                 <h2>Quanto de lucro deseja ganhar?</h2>\n//                 <input \n//                     type='number' \n//                     placeholder='Informe o lucro desejado' \n//                     value={lucroDesejado}\n//                     onChange={(e) => setLucroDesejado(e.target.value)}\n//                 />\n//                 <h3>Peso máximo caminhão</h3>\n//                 <input \n//                     type='number' \n//                     placeholder='Informe o peso máximo'\n//                     value={pesoMaximo}\n//                     onChange={(e) => setPesoMaximo(e.target.value)} \n//                 />\n//                 <h3>Capacidade</h3>\n//                 <input \n//                     type='number' \n//                     placeholder='Informe a capacidade do caminhão'\n//                     value={capacidadeCaminhao}\n//                     onChange={(e) => setCapacidadeCaminhao(e.target.value)} \n//                 />\n//                 <button onClick={handleGerarPossibilidades}>Gerar Possibilidades</button>\n//             </div>\n//             <RespostaSimulacao combinations={combinations} />\n//         </div>\n//     );\n// }\n\n// export default Simulacao;","map":{"version":3,"names":[],"sources":["C:/Users/Caiuã/Desktop/DEV - PATH/TRABALHO/cadastro-produtos-react/src/Simulacao.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\r\n// import { getFirestore, collection, getDocs } from 'firebase/firestore';\r\n// import { initializeApp } from 'firebase/app'; \r\n// import firebaseConfig from './Components/firebaseConfig'; \r\n// import RespostaSimulacao from './Components/RespostaSimulacao';\r\n\r\n// function Simulacao() {\r\n//     const [produtos, setProdutos] = useState([]);\r\n//     const [lucroDesejado, setLucroDesejado] = useState('');\r\n//     const [pesoMaximo, setPesoMaximo] = useState('');\r\n//     const [capacidadeCaminhao, setCapacidadeCaminhao] = useState('');\r\n//     const [combinations, setCombinations] = useState([]);\r\n\r\n//     useEffect(() => {\r\n//         const fetchProdutos = async () => {\r\n//             try {\r\n//                 const app = initializeApp(firebaseConfig);\r\n//                 const db = getFirestore(app);\r\n//                 const produtosRef = collection(db, 'produtos');\r\n//                 const produtosSnapshot = await getDocs(produtosRef);\r\n//                 const produtosData = produtosSnapshot.docs.map(doc => ({\r\n//                     id: doc.id,\r\n//                     ...doc.data()\r\n//                 }));\r\n//                 setProdutos(produtosData);\r\n//             } catch (error) {\r\n//                 console.error('Erro ao buscar os produtos:', error);\r\n//             }\r\n//         };\r\n//         fetchProdutos();\r\n//     }, []); \r\n\r\n//     const handleGerarPossibilidades = () => {\r\n//         const info_products = produtos.map(p => ({\r\n//             custo: parseFloat(p.PRECO_FINAL),\r\n//             nome: p.Nome,\r\n//             peso: parseFloat(p.Peso),\r\n//             volume: parseFloat(p.m3)\r\n//         }));\r\n\r\n//         encherCaminhaoComUmProduto(info_products);\r\n//     };\r\n\r\n//     function encherCaminhaoComUmProduto(objts){\r\n//         const newCombinations = [];\r\n        \r\n//         objts.forEach((obj) => {\r\n//             let peso_c_atual = 0;\r\n//             let volume_c_atual = 0;\r\n//             let qtde_produtos = 0;\r\n//             let custoTotal = 0;\r\n\r\n//             const lucro_desejado = parseFloat(lucroDesejado).toFixed(2);\r\n//             const MaxPeso = parseFloat(pesoMaximo);\r\n//             const MaxVol = parseFloat(capacidadeCaminhao);\r\n\r\n//             while (peso_c_atual < MaxPeso && volume_c_atual < MaxVol) {\r\n//                 if ((peso_c_atual + obj.peso) < MaxPeso && (volume_c_atual + obj.volume) < MaxVol) {\r\n//                     peso_c_atual += obj.peso;\r\n//                     volume_c_atual += obj.volume;\r\n//                     qtde_produtos++;\r\n//                     custoTotal += obj.custo;\r\n//                 } else {\r\n//                     const combinacao = {\r\n//                         nome: obj.nome,\r\n//                         volume_t: volume_c_atual.toFixed(),\r\n//                         peso_t: peso_c_atual.toFixed(2),\r\n//                         custo_uni: (custoTotal / qtde_produtos).toFixed(2),\r\n//                         venda_uni: ((custoTotal / qtde_produtos) + ((custoTotal / qtde_produtos) * (lucro_desejado / custoTotal))).toFixed(2),\r\n//                         lucro_uni: (((custoTotal / qtde_produtos) * (lucro_desejado / custoTotal))).toFixed(2),\r\n//                         lucro_t: (((custoTotal / qtde_produtos) * (lucro_desejado / custoTotal)) * qtde_produtos).toFixed(2),\r\n//                         qtde: qtde_produtos \r\n//                     };\r\n//                     newCombinations.push(combinacao);\r\n//                     break;\r\n//                 }\r\n//             }\r\n//         });\r\n//         setCombinations(newCombinations);\r\n//     }\r\n    \r\n//     return (\r\n//         <div className='Simulacao'>\r\n//             <h1 className='custom-cursor Simulacao-title'>Simulação De Lucro</h1>\r\n//             <div className='PriceWannaWin'>\r\n//                 <h2>Quanto de lucro deseja ganhar?</h2>\r\n//                 <input \r\n//                     type='number' \r\n//                     placeholder='Informe o lucro desejado' \r\n//                     value={lucroDesejado}\r\n//                     onChange={(e) => setLucroDesejado(e.target.value)}\r\n//                 />\r\n//                 <h3>Peso máximo caminhão</h3>\r\n//                 <input \r\n//                     type='number' \r\n//                     placeholder='Informe o peso máximo'\r\n//                     value={pesoMaximo}\r\n//                     onChange={(e) => setPesoMaximo(e.target.value)} \r\n//                 />\r\n//                 <h3>Capacidade</h3>\r\n//                 <input \r\n//                     type='number' \r\n//                     placeholder='Informe a capacidade do caminhão'\r\n//                     value={capacidadeCaminhao}\r\n//                     onChange={(e) => setCapacidadeCaminhao(e.target.value)} \r\n//                 />\r\n//                 <button onClick={handleGerarPossibilidades}>Gerar Possibilidades</button>\r\n//             </div>\r\n//             <RespostaSimulacao combinations={combinations} />\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// export default Simulacao;\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}