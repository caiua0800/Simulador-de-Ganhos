{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Caiu\\xE3\\\\Desktop\\\\DEV - PATH\\\\TRABALHO\\\\cadastro-produtos-react\\\\src\\\\Simulacao.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { getFirestore, collection, getDocs, doc, setDoc } from 'firebase/firestore';\nimport { initializeApp } from 'firebase/app';\nimport firebaseConfig from './Components/firebaseConfig';\nimport RespostaSimulacao from './Components/RespostaSimulacao';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Simulacao() {\n  _s();\n  const [produtos, setProdutos] = useState([]);\n  const [lucroDesejado, setLucroDesejado] = useState('');\n  const [capacidade, setCapacidade] = useState('');\n  const [VolumeCaminhao, setVolumeCaminhao] = useState('');\n  const [Frete, setFrete] = useState('');\n  const [maximoLucroUni, setMaximoLucroUni] = useState(200);\n  const [combinations, setCombinations] = useState([]);\n  const [combinacaoUnica, setcombinacaoUnica] = useState([]);\n  useEffect(() => {\n    const fetchProdutos = async () => {\n      try {\n        const app = initializeApp(firebaseConfig);\n        const db = getFirestore(app);\n        const produtosRef = collection(db, 'produtos');\n        const produtosSnapshot = await getDocs(produtosRef);\n        const produtosData = produtosSnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n        setProdutos(produtosData);\n      } catch (error) {\n        console.error('Erro ao buscar os produtos:', error);\n      }\n    };\n    fetchProdutos();\n  }, []);\n  const handleGerarUltimaSimulacao = () => {\n    const fetchProdutos = async () => {\n      try {\n        const app = initializeApp(firebaseConfig);\n        const db = getFirestore(app);\n        const produtosRef = collection(db, 'simulacao');\n        const produtosSnapshot = await getDocs(produtosRef);\n        const produtosData = produtosSnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n        setProdutos(produtosData);\n      } catch (error) {\n        console.error('Erro ao buscar os produtos:', error);\n      }\n    };\n    fetchProdutos();\n  };\n  const handleGerarPossibilidades = async () => {\n    const info_products = produtos.map(p => ({\n      custo: parseFloat(p.PRECO_FINAL),\n      nome: p.Nome,\n      peso: parseFloat(p.Peso),\n      volume: parseFloat(p.m3)\n    }));\n    let combsUnicas = [];\n    info_products.forEach(produto => {\n      let qtde = parseInt(parseInt(VolumeCaminhao) / produto.volume);\n      if (qtde * produto.peso < parseInt(VolumeCaminhao) * parseInt(capacidade) && qtde * produto.volume > parseInt(VolumeCaminhao) * 0.8) {\n        let comb = {\n          nome: produto.nome,\n          qtde: qtde,\n          peso: parseInt((qtde * parseFloat(produto.peso)).toFixed(2)),\n          peso_unitario: produto.peso,\n          volume_unitario: parseFloat(produto.volume.toFixed(2)),\n          volume: parseFloat((produto.volume * qtde).toFixed(4)),\n          custoUnitario: produto.custo,\n          vendaUnitario: parseFloat((lucroDesejado / (produto.custo * qtde + parseInt(Frete)) * produto.custo + produto.custo).toFixed(2)),\n          lucroUnitario: parseFloat((lucroDesejado / (produto.custo * qtde + parseInt(Frete)) * produto.custo).toFixed(2)),\n          lucroTotal: parseFloat((lucroDesejado / (produto.custo * qtde + parseInt(Frete)) * produto.custo * qtde).toFixed(2))\n        };\n        let lucroEmCima = comb.vendaUnitario / comb.custoUnitario * 100;\n        if (lucroEmCima < parseInt(maximoLucroUni)) {\n          combsUnicas.push(comb);\n        }\n      } else {\n        while (qtde * produto.peso > parseInt(VolumeCaminhao) * parseInt(capacidade)) {\n          qtde--;\n        }\n        let comb = {\n          nome: produto.nome,\n          qtde: qtde,\n          peso: parseInt((qtde * parseFloat(produto.peso)).toFixed(2)),\n          peso_unitario: produto.peso,\n          volume_unitario: parseFloat(produto.volume.toFixed(2)),\n          volume: parseFloat((produto.volume * qtde).toFixed(4)),\n          custoUnitario: produto.custo,\n          vendaUnitario: parseFloat((lucroDesejado / (produto.custo * qtde + parseInt(Frete)) * produto.custo + produto.custo).toFixed(2)),\n          lucroUnitario: parseFloat((lucroDesejado / (produto.custo * qtde + parseInt(Frete)) * produto.custo).toFixed(2)),\n          lucroTotal: parseFloat((lucroDesejado / (produto.custo * qtde + parseInt(Frete)) * produto.custo * qtde).toFixed(2))\n        };\n        let lucroEmCima = comb.vendaUnitario / comb.custoUnitario * 100;\n        if (lucroEmCima < parseInt(maximoLucroUni)) {\n          combsUnicas.push(comb);\n        }\n      }\n    });\n    setcombinacaoUnica(combsUnicas);\n    let indice = 0;\n    let array = [];\n    while (indice < info_products.length) {\n      if (encherCaminhao(info_products, indice)) {\n        let aux = encherCaminhao(info_products, indice);\n        let pesoSoma = 0;\n        aux.forEach(a => {\n          pesoSoma += a.peso_total;\n        });\n        if (pesoSoma >= parseInt(VolumeCaminhao) * parseInt(capacidade)) console.log(`combinacao ${aux} excluida por excesso de peso`);else array.push(aux);\n      }\n      indice++;\n    }\n    setCombinations(array);\n    try {\n      const app = initializeApp(firebaseConfig);\n      const db = getFirestore(app);\n      const simulacaoDocRef = doc(collection(db, 'simulacao'), 'ultima');\n      await setDoc(simulacaoDocRef, {\n        lucroDesejado,\n        capacidade,\n        VolumeCaminhao,\n        Frete\n      });\n      console.log('Dados da simulação salvos com sucesso!');\n    } catch (error) {\n      console.error('Erro ao salvar os dados da simulação:', error);\n    }\n    setLucroDesejado('');\n    setFrete('');\n  };\n  function encherCaminhao(objects, i) {\n    function compararPorCusto(a, b) {\n      return a.custo - b.custo;\n    }\n    function adicionarAoArray(array, i, n) {\n      for (let y = 0; y < n; y++) {\n        objects[i + y].custo = parseFloat(objects[i + y].custo.toFixed(2));\n        objects[i + y].volume = parseFloat(objects[i + y].volume.toFixed(5));\n        array[y] = objects[i + y];\n      }\n      array.sort(compararPorCusto);\n    }\n    function criarCombinacao(array_de_custo_ordenado, per_de_p) {\n      let combs = [];\n      for (let r = 0; r < array_de_custo_ordenado.length; r++) {\n        let p = array_de_custo_ordenado[r];\n        let qtde = parseInt(parseInt(VolumeCaminhao) / p.volume * per_de_p[r]);\n        let valor_unitario = parseFloat((parseInt(lucroDesejado) * per_de_p[r] / (p.custo * qtde + parseInt(Frete) / qtde) * p.custo + p.custo).toFixed(2));\n        let valor_total = parseFloat((valor_unitario * qtde).toFixed(2));\n        let custo_total = parseFloat((qtde * p.custo).toFixed(2));\n        let lucro_por_produto = parseFloat(((valor_unitario - p.custo) / p.custo * 100).toFixed(2));\n        let lucro_total = parseFloat((valor_total - custo_total).toFixed(2));\n        let volume_total = parseFloat((p.volume * qtde).toFixed(2));\n        let peso_total = parseFloat((p.peso * qtde).toFixed(2));\n        let comb = {\n          nome: p.nome,\n          custo_unitario: p.custo,\n          qtde: qtde,\n          custo_total: custo_total,\n          valor_unitario: valor_unitario,\n          valor_total: valor_total,\n          lucro_por_produto: `${lucro_por_produto}%`,\n          lucro_total: `R$${lucro_total}`,\n          volume_unitario: p.volume,\n          volume_total: volume_total,\n          peso_unitario: p.peso,\n          peso_total: peso_total\n        };\n        combs.push(comb);\n      }\n      return combs;\n    }\n    let combs;\n    if (objects[i + 5]) {\n      let array_de_custo_ordenado = [];\n      adicionarAoArray(array_de_custo_ordenado, i, 5);\n      let per_de_p = [0.4, 0.1, 0.1, 0.1, 0.3];\n      combs = criarCombinacao(array_de_custo_ordenado, per_de_p);\n    } else if (objects[i + 4]) {\n      let array_de_custo_ordenado = [];\n      adicionarAoArray(array_de_custo_ordenado, i, 4);\n      let per_de_p = [0.3, 0.2, 0.2, 0.3];\n      combs = criarCombinacao(array_de_custo_ordenado, per_de_p);\n    } else if (objects[i + 3]) {\n      let array_de_custo_ordenado = [];\n      adicionarAoArray(array_de_custo_ordenado, i, 3);\n      let per_de_p = [0.4, 0.3, 0.3];\n      combs = criarCombinacao(array_de_custo_ordenado, per_de_p);\n    } else if (objects[i + 2]) {\n      let array_de_custo_ordenado = [];\n      adicionarAoArray(array_de_custo_ordenado, i, 2);\n      let per_de_p = [0.6, 0.4];\n      combs = criarCombinacao(array_de_custo_ordenado, per_de_p);\n    } else {\n      return null;\n    }\n    return combs;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Simulacao\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"custom-cursor Simulacao-title\",\n      children: \"Simula\\xE7\\xE3o De Lucro\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"PriceWannaWin\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Quanto de lucro deseja ganhar?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Informe o lucro desejado\",\n        value: lucroDesejado,\n        onChange: e => setLucroDesejado(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Capacidade de peso por metros cubicos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Informe o peso m\\xE1ximo por metro cubico\",\n        value: capacidade,\n        onChange: e => setCapacidade(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Capacidade em metros cubicos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Informe a capacidade do caminh\\xE3o\",\n        value: VolumeCaminhao,\n        onChange: e => setVolumeCaminhao(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Frete + Custo Operacional\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Valor Frete + Custo Operacional\",\n        value: Frete,\n        onChange: e => setFrete(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleGerarPossibilidades,\n        children: \"Gerar Possibilidades\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleGerarUltimaSimulacao,\n        children: \"Gerar Ultima Simula\\xE7\\xE3o\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(RespostaSimulacao, {\n      combinacoesUnitarias: combinacaoUnica,\n      frete: Frete,\n      combinations: combinations\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 259,\n    columnNumber: 9\n  }, this);\n}\n_s(Simulacao, \"tu5h2dKQiq8pIWZk3gB/PSXNqC8=\");\n_c = Simulacao;\nexport default Simulacao;\nvar _c;\n$RefreshReg$(_c, \"Simulacao\");","map":{"version":3,"names":["React","useEffect","useState","getFirestore","collection","getDocs","doc","setDoc","initializeApp","firebaseConfig","RespostaSimulacao","jsxDEV","_jsxDEV","Simulacao","_s","produtos","setProdutos","lucroDesejado","setLucroDesejado","capacidade","setCapacidade","VolumeCaminhao","setVolumeCaminhao","Frete","setFrete","maximoLucroUni","setMaximoLucroUni","combinations","setCombinations","combinacaoUnica","setcombinacaoUnica","fetchProdutos","app","db","produtosRef","produtosSnapshot","produtosData","docs","map","id","data","error","console","handleGerarUltimaSimulacao","handleGerarPossibilidades","info_products","p","custo","parseFloat","PRECO_FINAL","nome","Nome","peso","Peso","volume","m3","combsUnicas","forEach","produto","qtde","parseInt","comb","toFixed","peso_unitario","volume_unitario","custoUnitario","vendaUnitario","lucroUnitario","lucroTotal","lucroEmCima","push","indice","array","length","encherCaminhao","aux","pesoSoma","a","peso_total","log","simulacaoDocRef","objects","i","compararPorCusto","b","adicionarAoArray","n","y","sort","criarCombinacao","array_de_custo_ordenado","per_de_p","combs","r","valor_unitario","valor_total","custo_total","lucro_por_produto","lucro_total","volume_total","custo_unitario","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","combinacoesUnitarias","frete","_c","$RefreshReg$"],"sources":["C:/Users/Caiuã/Desktop/DEV - PATH/TRABALHO/cadastro-produtos-react/src/Simulacao.js"],"sourcesContent":["\r\nimport React, { useEffect, useState } from 'react';\r\nimport { getFirestore, collection, getDocs, doc, setDoc } from 'firebase/firestore';\r\nimport { initializeApp } from 'firebase/app'; \r\nimport firebaseConfig from './Components/firebaseConfig'; \r\nimport RespostaSimulacao from './Components/RespostaSimulacao';\r\n\r\nfunction Simulacao() {\r\n    const [produtos, setProdutos] = useState([]);\r\n    const [lucroDesejado, setLucroDesejado] = useState('');\r\n    const [capacidade, setCapacidade] = useState('');\r\n    const [VolumeCaminhao, setVolumeCaminhao] = useState('');\r\n    const [Frete, setFrete] = useState('');\r\n    const [maximoLucroUni, setMaximoLucroUni] = useState(200);\r\n    const [combinations, setCombinations] = useState([]);\r\n    const [combinacaoUnica, setcombinacaoUnica] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchProdutos = async () => {\r\n            try {\r\n                const app = initializeApp(firebaseConfig);\r\n                const db = getFirestore(app);\r\n                const produtosRef = collection(db, 'produtos');\r\n                const produtosSnapshot = await getDocs(produtosRef);\r\n                const produtosData = produtosSnapshot.docs.map(doc => ({\r\n                    id: doc.id,\r\n                    ...doc.data()\r\n                }));\r\n                setProdutos(produtosData);\r\n            } catch (error) {\r\n                console.error('Erro ao buscar os produtos:', error);\r\n            }\r\n        };\r\n        fetchProdutos();\r\n    }, []); \r\n\r\n    const handleGerarUltimaSimulacao = () => {\r\n        const fetchProdutos = async () => {\r\n            try {\r\n                const app = initializeApp(firebaseConfig);\r\n                const db = getFirestore(app);\r\n                const produtosRef = collection(db, 'simulacao');\r\n                const produtosSnapshot = await getDocs(produtosRef);\r\n                const produtosData = produtosSnapshot.docs.map(doc => ({\r\n                    id: doc.id,\r\n                    ...doc.data()\r\n                }));\r\n                setProdutos(produtosData);\r\n            } catch (error) {\r\n                console.error('Erro ao buscar os produtos:', error);\r\n            }\r\n        };\r\n        fetchProdutos();\r\n    }\r\n\r\n    const handleGerarPossibilidades = async () => {\r\n        const info_products = produtos.map(p => ({\r\n            custo: parseFloat(p.PRECO_FINAL),\r\n            nome: p.Nome,\r\n            peso: parseFloat(p.Peso),\r\n            volume: parseFloat(p.m3)\r\n        }));\r\n\r\n\r\n        let combsUnicas = []\r\n        info_products.forEach(produto => {\r\n            let qtde = parseInt(parseInt(VolumeCaminhao) / produto.volume);\r\n\r\n            if ((qtde * produto.peso) < (parseInt(VolumeCaminhao) * parseInt(capacidade)) && (qtde * produto.volume) > (parseInt(VolumeCaminhao) * 0.8)) {\r\n\r\n                let comb = {\r\n                    nome: produto.nome,\r\n                    qtde: qtde,\r\n                    peso: parseInt((qtde * parseFloat(produto.peso)).toFixed(2)),\r\n                    peso_unitario: produto.peso,\r\n                    volume_unitario: parseFloat(produto.volume.toFixed(2)),\r\n                    volume: parseFloat((produto.volume * qtde).toFixed(4)),\r\n                    custoUnitario: produto.custo,\r\n                    vendaUnitario: parseFloat(((lucroDesejado / ((produto.custo * qtde) + parseInt(Frete)) * produto.custo) + produto.custo).toFixed(2)),\r\n                    lucroUnitario: parseFloat((lucroDesejado / ((produto.custo * qtde) + parseInt(Frete)) * produto.custo).toFixed(2)),\r\n                    lucroTotal: parseFloat(((lucroDesejado / ((produto.custo * qtde) + parseInt(Frete)) * produto.custo) * qtde).toFixed(2)),\r\n                };\r\n\r\n\r\n                let lucroEmCima = (comb.vendaUnitario / comb.custoUnitario)*100\r\n\r\n                if(lucroEmCima < parseInt(maximoLucroUni)){\r\n                    combsUnicas.push(comb)\r\n                }\r\n\r\n                    \r\n            }else{\r\n\r\n                while((qtde * produto.peso) > (parseInt(VolumeCaminhao) * parseInt(capacidade))){\r\n                    qtde--;\r\n                }\r\n\r\n\r\n                let comb = {\r\n                    nome: produto.nome,\r\n                    qtde: qtde,\r\n                    peso: parseInt((qtde * parseFloat(produto.peso)).toFixed(2)),\r\n                    peso_unitario: produto.peso,\r\n                    volume_unitario: parseFloat(produto.volume.toFixed(2)),\r\n                    volume: parseFloat((produto.volume * qtde).toFixed(4)),\r\n                    custoUnitario: produto.custo,\r\n                    vendaUnitario: parseFloat(((lucroDesejado / ((produto.custo * qtde) + parseInt(Frete)) * produto.custo) + produto.custo).toFixed(2)),\r\n                    lucroUnitario: parseFloat((lucroDesejado / ((produto.custo * qtde) + parseInt(Frete)) * produto.custo).toFixed(2)),\r\n                    lucroTotal: parseFloat(((lucroDesejado / ((produto.custo * qtde) + parseInt(Frete)) * produto.custo) * qtde).toFixed(2)),\r\n                };\r\n                let lucroEmCima = (comb.vendaUnitario / comb.custoUnitario)*100\r\n\r\n                if(lucroEmCima < parseInt(maximoLucroUni)){\r\n                    combsUnicas.push(comb)\r\n                }\r\n            }\r\n        });\r\n\r\n        setcombinacaoUnica(combsUnicas);\r\n        \r\n\r\n        let indice = 0;\r\n        let array = [];\r\n\r\n        while(indice < info_products.length){\r\n            if(encherCaminhao(info_products, indice)){\r\n                let aux = encherCaminhao(info_products, indice)\r\n                let pesoSoma = 0\r\n                aux.forEach(a => {\r\n                    pesoSoma += a.peso_total\r\n                })\r\n                if(pesoSoma >= (parseInt(VolumeCaminhao) * parseInt(capacidade)))\r\n                    console.log(`combinacao ${aux} excluida por excesso de peso`)\r\n                else array.push(aux)\r\n            }\r\n            indice++;\r\n        }\r\n\r\n        setCombinations(array);\r\n\r\n\r\n        try {\r\n            const app = initializeApp(firebaseConfig);\r\n            const db = getFirestore(app);\r\n            const simulacaoDocRef = doc(collection(db, 'simulacao'), 'ultima');\r\n            await setDoc(simulacaoDocRef, {\r\n                lucroDesejado,\r\n                capacidade,\r\n                VolumeCaminhao,\r\n                Frete\r\n            });\r\n            console.log('Dados da simulação salvos com sucesso!');\r\n        } catch (error) {\r\n            console.error('Erro ao salvar os dados da simulação:', error);\r\n        }\r\n        setLucroDesejado('');\r\n        setFrete('');\r\n    };\r\n\r\n    function encherCaminhao(objects, i){\r\n\r\n        function compararPorCusto(a, b) {\r\n            return a.custo - b.custo;\r\n        }\r\n\r\n        function adicionarAoArray(array, i, n){\r\n            for(let y = 0; y < n; y++){\r\n                objects[i+y].custo = parseFloat(objects[i+y].custo.toFixed(2));\r\n                objects[i+y].volume = parseFloat(objects[i+y].volume.toFixed(5));\r\n                array[y] = objects[i+y];\r\n            }\r\n\r\n            array.sort(compararPorCusto);\r\n        }\r\n\r\n        function criarCombinacao(array_de_custo_ordenado, per_de_p){\r\n            \r\n            let combs = [];\r\n\r\n            for(let r = 0; r < array_de_custo_ordenado.length; r++){\r\n                let p = array_de_custo_ordenado[r];\r\n                let qtde = parseInt((parseInt(VolumeCaminhao) / p.volume) * per_de_p[r])\r\n                let valor_unitario = parseFloat((((parseInt(lucroDesejado)*per_de_p[r]/((p.custo*qtde) + (parseInt(Frete) / qtde))) * p.custo) + p.custo).toFixed(2))\r\n                let valor_total = parseFloat((valor_unitario * qtde).toFixed(2))\r\n                let custo_total = parseFloat((qtde * p.custo).toFixed(2))\r\n                let lucro_por_produto = parseFloat((((valor_unitario - p.custo) / p.custo) * 100).toFixed(2));\r\n                let lucro_total = parseFloat((valor_total - custo_total).toFixed(2));\r\n                let volume_total = parseFloat((p.volume * qtde).toFixed(2));\r\n                let peso_total = parseFloat((p.peso * qtde).toFixed(2));\r\n\r\n                let comb = {\r\n                    nome: p.nome,\r\n                    custo_unitario: p.custo,\r\n                    qtde: qtde,\r\n                    custo_total: custo_total,\r\n                    valor_unitario:  valor_unitario,\r\n                    valor_total: valor_total,\r\n                    lucro_por_produto: `${lucro_por_produto}%`,\r\n                    lucro_total: `R$${lucro_total}`,\r\n                    volume_unitario: p.volume,\r\n                    volume_total: volume_total,\r\n                    peso_unitario: p.peso,\r\n                    peso_total: peso_total\r\n                }\r\n                combs.push(comb);\r\n            }\r\n            return combs;\r\n        }\r\n\r\n        let combs\r\n\r\n        if(objects[i+5]){\r\n\r\n            let array_de_custo_ordenado = []\r\n            adicionarAoArray(array_de_custo_ordenado, i, 5);\r\n\r\n\r\n            let per_de_p = [0.4, 0.1, 0.1, 0.1, 0.3]\r\n\r\n            combs = criarCombinacao(array_de_custo_ordenado, per_de_p)\r\n\r\n        }else if(objects[i+4]){\r\n\r\n            let array_de_custo_ordenado = []\r\n            adicionarAoArray(array_de_custo_ordenado, i, 4);\r\n\r\n            let per_de_p = [0.3, 0.2, 0.2, 0.3]\r\n\r\n            combs = criarCombinacao(array_de_custo_ordenado, per_de_p)\r\n\r\n        }else if(objects[i+3]){\r\n\r\n            let array_de_custo_ordenado = []\r\n            adicionarAoArray(array_de_custo_ordenado, i, 3);\r\n\r\n            let per_de_p = [0.4, 0.3, 0.3]\r\n\r\n            combs = criarCombinacao(array_de_custo_ordenado, per_de_p)\r\n\r\n\r\n        }else if(objects[i+2]){\r\n\r\n            let array_de_custo_ordenado = []\r\n            adicionarAoArray(array_de_custo_ordenado, i, 2);\r\n            \r\n            let per_de_p = [0.6, 0.4]\r\n\r\n            combs = criarCombinacao(array_de_custo_ordenado, per_de_p)\r\n            \r\n        }else{\r\n            return null;\r\n        }\r\n        return combs;\r\n    }\r\n\r\n\r\n    \r\n    return (\r\n        <div className='Simulacao'>\r\n            <h1 className='custom-cursor Simulacao-title'>Simulação De Lucro</h1>\r\n            <div className='PriceWannaWin'>\r\n                <h2>Quanto de lucro deseja ganhar?</h2>\r\n                <input \r\n                    type='number' \r\n                    placeholder='Informe o lucro desejado' \r\n                    value={lucroDesejado}\r\n                    onChange={(e) => setLucroDesejado(e.target.value)}\r\n                />\r\n                <h3>Capacidade de peso por metros cubicos</h3>\r\n                <input \r\n                    type='number' \r\n                    placeholder='Informe o peso máximo por metro cubico'\r\n                    value={capacidade}\r\n                    onChange={(e) => setCapacidade(e.target.value)} \r\n                />\r\n                <h3>Capacidade em metros cubicos</h3>\r\n                <input \r\n                    type='number' \r\n                    placeholder='Informe a capacidade do caminhão'\r\n                    value={VolumeCaminhao}\r\n                    onChange={(e) => setVolumeCaminhao(e.target.value)} \r\n                />\r\n                <h3>Frete + Custo Operacional</h3>\r\n                <input \r\n                    type='number' \r\n                    placeholder='Valor Frete + Custo Operacional'\r\n                    value={Frete}\r\n                    onChange={(e) => setFrete(e.target.value)} \r\n                />\r\n\r\n                <button onClick={handleGerarPossibilidades}>Gerar Possibilidades</button>\r\n                <button onClick={handleGerarUltimaSimulacao}>Gerar Ultima Simulação</button>\r\n            </div>\r\n            <RespostaSimulacao combinacoesUnitarias={combinacaoUnica} frete={Frete} combinations={combinations} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Simulacao;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}